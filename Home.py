import streamlit as st 
import networkx as nx
import pyvis as pv
from pyvis.network import Network
import streamlit.components.v1 as components
import pandas as pd
from algo_lib.search import dfs, bfs
from algo_lib.scc import Tarjan
from algo_lib.shortest_path import bellman_ford
from algo_lib.topo import topo_sort
from algo_lib.mst import Kruskal, Prim


st.set_page_config(layout="centered",
                   page_title="GraphVify",
                   page_icon="üåê",
                   initial_sidebar_state="expanded")

# T·∫†O ƒê·ªí TH·ªä
# V√¥ h∆∞·ªõng


def createGraph(edges):
    G = nx.Graph()
    for edge in edges:
        if len(edge) == 1:
            G.add_node(edge[0])
        elif len(edge) == 2:
            G.add_edge(edge[0], edge[1])
        elif len(edge) == 3:
            # l∆∞u tr·ªØ tr·ªçng s·ªë cung b·∫±ng label
            # G.edges(data=True)
            G.add_edge(edge[0], edge[1], title=edge[2], label=edge[2])
        else:
            st.toast("Cung c√≥ nhi·ªÅu h∆°n 4 tham s·ªë s·∫Ω kh√¥ng hi·ªÉn th·ªã!", icon='‚ö†Ô∏è')
    return G

# C√≥ h∆∞·ªõng


def createDiGraph(edges):
    G = nx.DiGraph()
    for edge in edges:
        if len(edge) == 1:
            G.add_node(edge[0])
        elif len(edge) == 2:
            G.add_edge(edge[0], edge[1])
        elif len(edge) == 3:
            G.add_edge(edge[0], edge[1], title=edge[2], label=edge[2])
        else:
            st.toast("Cung c√≥ nhi·ªÅu h∆°n 4 tham s·ªë s·∫Ω kh√¥ng hi·ªÉn th·ªã!", icon='‚ö†Ô∏è')
    return G


def get_component_edges(edges, component):
    component_edges = []
    if len(component) == 1:
        component_edges.append(component[0])
    else:
        for edge in edges:
            # n·∫øu c·∫£ 2 ƒë·ªânh thu·ªôc c√πng b·ªô ph·∫≠n th√¨ th√™m cung
            if edge[0] in component and edge[1] in component:
                component_edges.append(edge)
    return component_edges

# V·∫Ω ƒë·ªì th·ªã


def drawGraph(graph, directed):
    vis = Network(height="350px", width="100%", directed=directed)
    vis.from_nx(graph)
    vis.write_html("graph.html")
    HtmlFile = open("graph.html", 'r', encoding='utf-8')
    source_code = HtmlFile.read()
    components.html(source_code, height=360)


def main():
    # Giao di·ªán ng∆∞·ªùi d√πng
    st.title("‚ú®Graph:red[Vify]")
    with st.popover("H∆∞·ªõng d·∫´n üìé"):
        st.markdown("**Gi·ªõi thi·ªáu**\n\n·ª®ng d·ª•ng web n√†y cho ph√©p b·∫°n m√¥ ph·ªèng c√°c thao t√°c c∆° b·∫£n tr√™n ƒë·ªì th·ªã, bao g·ªìm:\n *   Nh·∫≠p ƒë·ªì th·ªã\n*   Duy·ªát ƒë·ªì th·ªã\n*   Ki·ªÉm tra t√≠nh li√™n th√¥ng\n* T√¨m ƒë∆∞·ªùng ƒëi ng·∫Øn nh·∫•t\n\n **H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng**\n\n")
        with st.expander("Nh·∫≠p ƒë·ªì th·ªã"):
            st.markdown("1.Ch·ªçn ph∆∞∆°ng th·ª©c nh·∫≠p **(C√≥ h∆∞·ªõng/ V√¥ h∆∞·ªõng)**.\n\n 2.Nh·∫≠p t·ª´ng c·∫∑p ƒë·ªânh v√† tr·ªçng s·ªë (start end weight) c·ªßa m·ªói c·∫°nh tr√™n m·ªôt d√≤ng c√°ch nhau b·ªüi m·ªôt kho·∫£ng tr·∫Øng.\n\n 3.Nh·∫•p v√†o n√∫t **'Nh·∫≠p'**.")
        with st.expander("Duy·ªát ƒë·ªì th·ªã"):
            st.markdown("1.Nh·∫≠p ƒë·ªì th·ªã.\n\n2.Ch·ªçn ƒë·ªânh b·∫Øt ƒë·∫ßu.\n\n3.Ch·ªçn thu·∫≠t to√°n duy·ªát:\n\n*   Duy·ªát theo chi·ªÅu s√¢u (DFS)\n*   Duy·ªát theo chi·ªÅu r·ªông (BFS)\n\n4.B·∫•m n√∫t **'Duy·ªát'**.\n\n5.K·∫øt qu·∫£ s·∫Ω hi·ªÉn th·ªã trong b·∫£ng ƒëi·ªÅu khi·ªÉn.")
        with st.expander("Ki·ªÉm tra t√≠nh li√™n th√¥ng"):
            st.markdown("1.Nh·∫≠p ƒë·ªì th·ªã.\n\n2.Nh·∫•n n√∫t **'Ki·ªÉm tra'**.\n\n3.K·∫øt qu·∫£ ki·ªÉm tra s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã trong b·∫£ng ƒëi·ªÅu khi·ªÉn bao g·ªìm:\n\n*   S·ªë l∆∞·ª£ng b·ªô ph√¢n li√™n th√¥ng/ li√™n th√¥ng m·∫°nh\n*   C√°c b·ªô ph√¢n li√™n th√¥ng/ li√™n th√¥ng m·∫°nh")
        with st.expander("T√¨m ƒë∆∞·ªùng ƒëi ng·∫Øn nh·∫•t"):
            st.markdown("1.Nh·∫≠p ƒë·ªì th·ªã **(c√≥ tr·ªçng s·ªë)**.\n\n2.Ch·ªçn ƒë·ªânh ngu·ªìn.\n\n3.Nh·∫•n n√∫t **'T√¨m'**.\n\n4.K·∫øt qu·∫£ s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã trong b·∫£ng ƒëi·ªÅu khi·ªÉn d∆∞·ªõi d·∫°ng:\n\n    A -> B : ƒê∆∞·ªùng ƒëi ng·∫Øn nh·∫•t\n\nN·∫øu k·∫øt qu·∫£ tr·∫£ v·ªÅ d·∫°ng:\n\n    A -> B : ‚ôæÔ∏è\n\n t·ª©c l√† kh√¥ng c√≥ ƒë∆∞·ªùng ƒëi t·ª´ A -> B.")
        with st.expander("Th·ª© t·ª± Topo"):
            # df = pd.DataFrame(['a', 'b', 'c', 'd'], columns=['ƒê·ªânh']).T
            # dfmarkdown = df.to_markdown()
            # st.markdown("1.Nh·∫≠p ƒë·ªì th·ªã **(c√≥ h∆∞·ªõng kh√¥ng c√≥ chu tr√¨nh)**.\n\n2.Nh·∫•n n√∫t **'Th·ª±c hi·ªán'**.\n\n3.K·∫øt qu·∫£ s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã trong b·∫£ng ƒëi·ªÅu khi·ªÉn d∆∞·ªõi d·∫°ng: \n" + dfmarkdown + "\n\n T∆∞∆°ng ·ª©ng v·ªõi th·ª© t·ª± topo: **a,b,c,d**")
            pass
    # Nh·∫≠p danh s√°ch cung
    st.sidebar.subheader("Nh·∫≠p ƒë·ªì th·ªã:")
    directed = st.sidebar.toggle("C√≥ h∆∞·ªõng")
    edges = st.sidebar.text_area(
        "Danh s√°ch cung (c·∫°nh):", value="1 3 4\n3 2 5\n2 1 10\n5 6 2\n6 5 3\n3 5 1")
    has_weights = False
    edges = [tuple(edge.split()) for edge in edges.splitlines()]
    # for _ in edges:
    #     print(_)
    # graph = createGraph(edges)
    for edge in edges:
        if len(edge) == 3:
            has_weights = True
    if directed:
        graph = createDiGraph(edges)
        with st.expander("ƒê·ªì th·ªã", expanded=True):
            drawGraph(graph, directed)
    else:
        graph = createGraph(edges)
        with st.expander("ƒê·ªì th·ªã", expanded=True):
            drawGraph(graph, directed)

    st.sidebar.button("Nh·∫≠p")

    st.sidebar.divider()

    st.sidebar.subheader("Duy·ªát ƒë·ªì th·ªã:")
    startNode = st.sidebar.selectbox(
        "Ch·ªçn ƒë·ªânh b·∫Øt ƒë·∫ßu:", options=list(graph.nodes()))
    traversalMethod = st.sidebar.selectbox(
        "Ch·ªçn ph∆∞∆°ng th·ª©c duy·ªát:", options=["Duy·ªát theo chi·ªÅu r·ªông (BFS)", "Duy·ªát theo chi·ªÅu s√¢u (DFS)"])

    if st.sidebar.button("Duy·ªát"):
        if traversalMethod == "Duy·ªát theo chi·ªÅu r·ªông (BFS)":
            nodes = set(graph.nodes)-bfs(graph, startNode)
            while nodes:
                lst = list(nodes)
                lst.sort()
                nodes = nodes-bfs(graph, lst[0])
        elif traversalMethod == "Duy·ªát theo chi·ªÅu s√¢u (DFS)":
            nodes = set(graph.nodes)-dfs(graph, startNode)
            while nodes:
                lst = list(nodes)
                lst.sort()
                nodes = nodes-dfs(graph, lst[0])

    st.sidebar.divider()

    st.sidebar.subheader("Ki·ªÉm tra t√≠nh li√™n th√¥ng:")
    st.sidebar.caption(
        "S·ª≠ d·ª•ng thu·∫≠t to√°n :violet[Tarjan] - ƒë·∫øm s·ªë l∆∞·ª£ng b·ªô ph·∫≠n :red[Li√™n th√¥ng]/ :blue[Li√™n th√¥ng m·∫°nh] c·ªßa ƒë·ªì th·ªã :red[V√¥ h∆∞·ªõng]/ :blue[C√≥ h∆∞·ªõng]")
    if st.sidebar.button("Ki·ªÉm tra"):
        strong_components = Tarjan(graph)
        component_edges_list = []
        for component in strong_components:
            component_edges = get_component_edges(list(edges), component)
            component_edges_list.append(component_edges)

        if directed:
            st.subheader(
                f"ƒê·ªì th·ªã c√≥ :blue[{len(component_edges_list)} b·ªô ph·∫≠n li√™n th√¥ng m·∫°nh]")
            for i, component in enumerate(component_edges_list):
                st.text(f"B·ªô ph·∫≠n li√™n th√¥ng m·∫°nh {i+1}:")
                drawGraph(createDiGraph(component), directed)
        else:
            st.subheader(
                f"ƒê·ªì th·ªã c√≥ :blue[{len(component_edges_list)} b·ªô ph·∫≠n li√™n th√¥ng]")
            for i, component in enumerate(component_edges_list):
                st.text(f"B·ªô ph·∫≠n li√™n th√¥ng {i+1}:")
                drawGraph(createGraph(component), directed)
    st.sidebar.divider()
    st.sidebar.subheader("T√¨m ƒë∆∞·ªùng ƒëi ng·∫Øn nh·∫•t:")
    st.sidebar.caption(
        "T√¨m ƒë∆∞·ªùng ƒëi ng·∫Øn nh·∫•t t·ª´ 1 ƒë·ªânh ƒë·∫øn c√°c ƒë·ªânh c√≤n l·∫°i s·ª≠ d·ª•ng thu·∫≠t to√°n :violet[Bellman Ford]")
    start_node = st.sidebar.selectbox('Ch·ªçn ƒë·ªânh ngu·ªìn:', graph.nodes)
    if st.sidebar.button("T√¨m"):
        if has_weights:
            if start_node in graph.nodes:
                shortest_paths = bellman_ford(graph, start_node, edges)
                with st.expander(f"ƒê∆∞·ªùng ƒëi ng·∫Øn nh·∫•t t·ª´ ƒë·ªânh :blue[{start_node}] ƒë·∫øn t·∫•t c·∫£ c√°c ƒë·ªânh kh√°c l√†:"):
                    for node, distance in shortest_paths.items():
                        if (distance != float('inf')):
                            st.subheader(f"{start_node} -> {node}: {distance}")
                        else:
                            st.subheader(f"{start_node} -> {node}: ‚ôæÔ∏è")
        else:
            st.toast('Vui l√≤ng nh·∫≠p tr·ªçng s·ªë!', icon='‚ö†Ô∏è')

    st.sidebar.divider()
    st.sidebar.subheader("Th·ª© t·ª± topo:")
    st.sidebar.caption(
        "X·∫øp c√°c ƒë·ªânh c·ªßa ƒë·ªì th·ªã :red[c√≥ h∆∞·ªõng kh√¥ng c√≥ chu tr√¨nh (DAG)] theo th·ª© t·ª± topo")
    if st.sidebar.button("Th·ª±c hi·ªán"):
        if directed:
            try:
                topo_order = []
                topo_sort(graph, topo_order, edges)
            except:
                st.toast(
                    'ƒê·ªì th·ªã kh√¥ng ph·∫£i l√† DAG, kh√¥ng th·ªÉ t√≠nh to√°n th·ª© t·ª± topo.', icon='‚ö†Ô∏è')
                return
            # st.table(pd.DataFrame(topo_order, columns=['ƒê·ªânh']).T)
            
            st.subheader('Th·ª© t·ª± topo: '+', '.join(topo_order))
        else:
            st.toast('ƒê·ªì th·ªã v√¥ h∆∞·ªõng kh√¥ng th·ªÉ t√≠nh to√°n th·ª© t·ª± topo!', icon='‚ö†Ô∏è')
    
    st.sidebar.divider()

    st.sidebar.subheader("T√¨m c√¢y khung nh·ªè nh·∫•t:")
    st.sidebar.caption("S·ª≠ d·ª•ng thu·∫≠t to√°n :violet[Kruskal] ho·∫∑c :violet[Prim] ƒë·ªÉ t√¨m c√¢y khung nh·ªè nh·∫•t")
    mst_algo = st.sidebar.selectbox("Ch·ªçn thu·∫≠t to√°n:", options=["Kruskal", "Prim"])
    if mst_algo == "Prim":
        start_node_Prim = st.sidebar.selectbox("Ch·ªçn ƒë·ªânh b·∫Øt ƒë·∫ßu t√¨m:", options=list(graph.nodes()))
        # print(type(start_node_Prim))
    if st.sidebar.button("T√¨m c√¢y khung"):
        strong_components = Tarjan(graph)
        if directed:
            st.toast('ƒê·ªì th·ªã c√≥ h∆∞·ªõng kh√¥ng th·ªÉ t√¨m c√¢y khung nh·ªè nh·∫•t!', icon='‚ö†Ô∏è')
        elif len(strong_components) != 1:
            st.toast("ƒê·ªì th·ªã kh√¥ng li√™n th√¥ng kh√¥ng th·ªÉ t√¨m c√¢y khung nh·ªè nh·∫•t!", icon='‚ö†Ô∏è')
        else:
            if mst_algo == "Kruskal":
                mst = Kruskal(graph)
                # print(mst)
            elif mst_algo == "Prim":
                mst = Prim(graph, start_node_Prim)
                # print(mst)
            mst_graph = createGraph(mst[0])
            # print(mst)
            # print(mst_graph)
            st.subheader("C√¢y khung nh·ªè nh·∫•t")
            drawGraph(mst_graph, directed)
            st.subheader(f"Tr·ªçng l∆∞·ª£ng: {mst[1]}")
    # edges = ['3','2','1']
    # edges.sort(reverse=False)
    # print(edges)

if __name__ == "__main__":
    main()
